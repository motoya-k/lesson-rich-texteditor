import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { gql } from "urql";
import { useRouter } from "next/router";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";

import Popper from "@mui/material/Popper";
import Paper from "@mui/material/Paper";
import Grow from "@mui/material/Grow";
import ClickAwayListener from "@mui/material/ClickAwayListener";
import MenuList from "@mui/material/MenuList";
import MenuItem from "@mui/material/MenuItem";

import { NoteTemplateFieldFragment } from "@/.generate/gql";

export const NOTE_TEMPLATE_FILED = gql`
  fragment NoteTemplateField on DocumentTemplate {
    id
    title
  }
`;

type Props = {
  noteTemplates: NoteTemplateFieldFragment[];
  onSelectTemplate: (template: NoteTemplateFieldFragment) => Promise<void>;
  onCreateNote: () => Promise<void>;
};
export default function ToolBar(props: Props) {
  const { noteTemplates, onSelectTemplate, onCreateNote } = props;

  const [open, setOpen] = useState(false);
  const anchorRef = useRef<HTMLButtonElement>(null);

  const handleClose = (event: Event | React.SyntheticEvent) => {
    if (
      anchorRef.current &&
      anchorRef.current.contains(event.target as HTMLElement)
    ) {
      return;
    }

    setOpen(false);
  };

  function handleListKeyDown(event: React.KeyboardEvent) {
    if (event.key === "Tab") {
      event.preventDefault();
      setOpen(false);
    } else if (event.key === "Escape") {
      setOpen(false);
    }
  }

  const prevOpen = useRef(open);
  useEffect(() => {
    if (prevOpen.current === true && open === false) {
      anchorRef.current!.focus();
    }
    prevOpen.current = open;
  }, [open]);

  return (
    <>
      <Head>
        <title>Document</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack direction="row-reverse" p={2} spacing={2}>
        <Button
          variant="outlined"
          onClick={async () => {
            await onCreateNote();
          }}
        >
          New Note
        </Button>
        <Button
          ref={anchorRef}
          id="composition-button"
          aria-controls={open ? "composition-menu" : undefined}
          aria-expanded={open ? "true" : undefined}
          aria-haspopup="true"
          variant="outlined"
          onClick={() => setOpen((prevOpen) => !prevOpen)}
        >
          Template
        </Button>
        <Popper
          open={open}
          anchorEl={anchorRef.current}
          role={undefined}
          placement="bottom-start"
          transition
          disablePortal
        >
          {({ TransitionProps, placement }) => (
            <Grow
              {...TransitionProps}
              style={{
                transformOrigin:
                  placement === "bottom-start" ? "left top" : "left bottom",
              }}
            >
              <Paper>
                <ClickAwayListener onClickAway={handleClose}>
                  <MenuList
                    autoFocusItem={open}
                    id="composition-menu"
                    aria-labelledby="composition-button"
                    onKeyDown={handleListKeyDown}
                  >
                    {noteTemplates.map((noteTemplate) => {
                      return (
                        <MenuItem
                          key={noteTemplate.id}
                          onClick={() => {
                            onSelectTemplate(noteTemplate);
                            handleClose;
                          }}
                        >
                          {noteTemplate.title}
                        </MenuItem>
                      );
                    })}
                  </MenuList>
                </ClickAwayListener>
              </Paper>
            </Grow>
          )}
        </Popper>
      </Stack>
    </>
  );
}
