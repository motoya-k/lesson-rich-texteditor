import Head from "next/head";
import { useEffect, useMemo, useRef, useState } from "react";
import { gql } from "urql";
import Link from "next/link";
import { useRouter } from "next/router";

import Table from "@/components/Table";
import { useCurrentUser } from "@/context";

import {
  useGetNotesQuery,
  Document,
  User,
  useCreateNoteMutation,
  useGetNoteTemplateQuery,
} from "@/.generate/gql";
import ToolBar, { NOTE_TEMPLATE_FILED } from "./components/ToolBar";

gql`
  ${NOTE_TEMPLATE_FILED}

  query GetNotes {
    notes: documents {
      id
      title
      author {
        id
        name
      }
      created_at
      updated_at
    }
    noteTemplates: documentTemplates {
      ...NoteTemplateField
    }
  }

  mutation CreateNote($document: DocumentInput!) {
    createDocument(variables: $document) {
      id
    }
  }
`;

type TableData = Omit<Document, "content" | "author"> & {
  author: Omit<User, "email">;
};

export default function NotesPage() {
  const currentUser = useCurrentUser();
  const router = useRouter();

  const [{ data }] = useGetNotesQuery();

  const notes = useMemo(() => data?.notes ?? [], [data]);

  const [, createNote] = useCreateNoteMutation();

  const columns = [
    {
      title: "タイトル",
      render: (note: TableData) => (
        <Link href={`/notes/${note.id}`}>{note.title}</Link>
      ),
    },
  ];
  return (
    <>
      <Head>
        <title>Document</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToolBar
        onSelectTemplate={async (v) => {
          const results = await createNote({
            document: {
              title: "New Note",
              content: JSON.parse("{}"),
              author_id: currentUser?.id ?? "",
            },
          });
          const noteId = results.data?.createDocument.id;
          if (!noteId) {
            console.error(results.error);
            return;
          }
          router.push(`/notes/${noteId}?template=${v.id}`);
        }}
        onCreateNote={async () => {
          const results = await createNote({
            document: {
              title: "New Note",
              content: JSON.parse("{}"),
              author_id: currentUser?.id ?? "",
            },
          });
          const noteId = results.data?.createDocument.id;
          if (!noteId) {
            console.error(results.error);
            return;
          }
          router.push(`/notes/${noteId}`);
        }}
        noteTemplates={data?.noteTemplates ?? []}
      />
      <Table<TableData> columns={columns} data={notes} />
    </>
  );
}
