import Head from "next/head";
import { useRouter } from "next/router";
// import { Editor } from "novel";
import { gql } from "urql";
import Skeleton from "@mui/material/Skeleton";
import LoadingButton from "@mui/lab/LoadingButton";
import Stack from "@mui/material/Stack";
import TextField from "@mui/material/TextField";
import SaveIcon from "@mui/icons-material/Save";

import { useNote } from "./hooks/useNote";
// import { useGetNoteTemplateQuery } from "@/.generate/gql";
import { RichEditor } from "@/components/RichEditor";

gql`
  query GetNote($noteId: UUID!) {
    note: document(id: $noteId) {
      id
      title
      content
      author {
        id
        name
      }
      created_at
      updated_at
    }
  }

  query GetNoteTemplate($noteTemplateId: UUID!) {
    noteTemplate: documentTemplate(id: $noteTemplateId) {
      title
      content
    }
  }

  mutation UpdateNote($document: UpdateDocumentInput!) {
    updateDocument(variables: $document) {
      id
    }
  }
`;

export default function NotesPage() {
  const router = useRouter();
  const { noteId, template } = router.query;

  const { content, title, setTitle, isLoading, handleSave, handleUpdate } =
    useNote({
      noteId: noteId as string,
      templateId: template as string,
    });

  return (
    <>
      <Head>
        <title>Document</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {content ? (
        <>
          <Stack my={2} direction="row-reverse">
            <LoadingButton
              loading={isLoading}
              loadingPosition="start"
              startIcon={<SaveIcon />}
              variant="outlined"
              onClick={handleSave}
            >
              save
            </LoadingButton>
          </Stack>
          <TextField
            sx={{ width: "100%", mb: 2 }}
            id="outlined-basic"
            label={title ? "" : "タイトルを入力"}
            variant="outlined"
            onChange={(e) => setTitle(e.target.value)}
            value={title}
          />
          <RichEditor />
        </>
      ) : (
        <Skeleton variant="rectangular" width={"100%"} height={60} />
      )}
    </>
  );
}
